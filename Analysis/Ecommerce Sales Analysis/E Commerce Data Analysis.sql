/* --==============================
DATA ACQUISITION SETUP FOR E-COMMERCE ANALYTICS

This script automates the download and preparation of an e-commerce dataset from Kaggle 
for SQL analysis. The dataset contains transactional data including:
- Customer orders
- Payment records
- Product information
- Seller details

PREREQUISITES:
1. Kaggle account with API access (https://www.kaggle.com/docs/api)
2. Python environment with required packages

STEPS PERFORMED:
1. Downloads the dataset using Kaggle's official hub
2. Inspects available data files
3. Loads all CSV files into Pandas DataFrames for SQL processing

-- ==================================================== */

-- Python Code
pip install kagglehub
import kagglehub
import pandas as pd
import os

# 1. Download the dataset (returns directory path)
dataset_path = kagglehub.dataset_download("devarajv88/target-dataset")
print(f"Dataset downloaded to: {dataset_path}")

# 2. List all files in the downloaded directory
all_files = os.listdir(dataset_path)
print("Files in dataset:", all_files)

# 3. Load all CSV files into DataFrames
data = {}
for file in all_files:
    if file.endswith('.csv'):
        name = file.replace('.csv', '')
        full_path = os.path.join(dataset_path, file)
        data[name] = pd.read_csv(full_path)
        print(f"âœ… Loaded {name} ({len(data[name])} rows)")


--SQLCode

-- List all unique cities where customers are located. 
select distinct(customer_unique_id) , customer_city from Customers;

-- Count the number of orders placed in 2017.
select 
	count(order_id) 	
from orders
where year(order_purchase_timestamp) = 2017 
    

--Find the top 10 best performing Category by total sales
select top 10
	upper(products.product_category) , 
	round(sum(payments.payment_value),2) 
from products 
	join [Order Items]	on products.product_id = [Order Items].product_id
	join payments on payments.order_id = [Order Items].order_id
group by upper(products.product_category)
order by round(sum(payments.payment_value),2)  desc

--Find the  10 worst performing Category by total sales
select top 10
	upper(products.product_category) , 
	round(sum(payments.payment_value),2) 
from products 
	join [Order Items]	on products.product_id = [Order Items].product_id
	join payments on payments.order_id = [Order Items].order_id
group by upper(products.product_category)
order by round(sum(payments.payment_value),2) 


--Calculate the percentage of orders that were paid in installments
SELECT 
    ((SUM(CASE WHEN payment_installments > 3 THEN 1 ELSE 0 END)) / COUNT(*)) * 100  as Perc_orded_in_Installments
FROM 
    Payments

-- Count the number of customers from each state
select 
	customer_state ,
	count(customer_id)
from Customers group by customer_state


-- The number of orders placed per month in 2018.
select 
	month(order_purchase_timestamp) as Month ,
	count(order_id) as order_count
from Orders
where year(order_purchase_timestamp) = 2018
group by month(order_purchase_timestamp)
order by month(order_purchase_timestamp)

-- The average number of products per order, grouped by customer city.
with count_per_order as 
	(select 
			orders.order_id, 
			orders.customer_id, 
			count([Order Items].order_id) as oc
		from orders join [Order Items]
		on orders.order_id = [Order Items].order_id
		group by Orders.order_id, Orders.customer_id
)

select
	customers.customer_city, 
	round(avg(count_per_order.oc),2) average_orders
from customers 
	join count_per_order on customers.customer_id = count_per_order.customer_id
group by customers.customer_city order by average_orders desc


-- The percentage of total revenue contributed by each product category
select
	upper(products.product_category) as category, 
	round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2)  as Sales_Percentage
from products 
	join [Order Items] on products.product_id = [Order Items].product_id
	join payments on payments.order_id = [Order Items].order_id
group by product_category 
order by sales_percentage desc


-- Ranking the total revenue generated by each seller r.
SELECT   seller_id,   Total_Revenue,  DENSE_RANK() OVER(ORDER BY Total_Revenue DESC) AS rn
FROM (
    SELECT 
        [Order Items].seller_id, 
        ROUND(SUM(payments.payment_value), 2) AS Total_Revenue
    FROM [Order Items] 
    JOIN payments ON [Order Items].order_id = payments.order_id
    GROUP BY [Order Items].seller_id
) AS a
ORDER BY rn;


-- The cumulative sales per month for each year.
SELECT    a.years,    a.months,    a.payment,    SUM(a.payment) OVER( PARTITION BY a.years 
        ORDER BY a.years, a.months
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_sales
FROM 
    (SELECT 
        YEAR(Orders.order_purchase_timestamp) AS years,
        MONTH(Orders.order_purchase_timestamp) AS months,
        ROUND(SUM(payments.payment_value), 2) AS payment
     FROM orders 
     JOIN payments ON Orders.order_id = payments.order_id
     GROUP BY 
         YEAR(Orders.order_purchase_timestamp),
         MONTH(Orders.order_purchase_timestamp)
    ) AS a
ORDER BY a.years, a.months;

-- The year-over-year growth rate of total sales
WITH yearly_payments AS
(
    SELECT 
        YEAR(Orders.order_purchase_timestamp) AS years,
        ROUND(SUM(Payments.payment_value), 2) AS payment 
    FROM orders 
    JOIN payments ON orders.order_id = payments.order_id
    GROUP BY YEAR(Orders.order_purchase_timestamp)
 )   
SELECT 
    years,
    payment AS current_year_payment,
    LAG(payment, 1) OVER(ORDER BY years) AS previous_year_payment,
    ROUND(
        ((payment - LAG(payment, 1) OVER(ORDER BY years)) / 
        NULLIF(LAG(payment, 1) OVER(ORDER BY years), 0)
    ) * 100, 2) AS yoy_growth_percentage
FROM yearly_payments
ORDER BY years;


-- The top 3 customers who spent the most money in each year.
SELECT   years,  customer_id, ROUND(payment, 2) AS total_payment,
    d_rank
FROM (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS years,
        o.customer_id,
        SUM(p.payment_value) AS payment,
        DENSE_RANK() OVER(
            PARTITION BY YEAR(o.order_purchase_timestamp)
            ORDER BY SUM(p.payment_value) DESC
        ) AS d_rank
    FROM orders o
    JOIN payments p ON p.order_id = o.order_id
    GROUP BY 
        YEAR(o.order_purchase_timestamp),
        o.customer_id
) AS yearly_customer_payments
WHERE d_rank <= 3
ORDER BY years, d_rank;
